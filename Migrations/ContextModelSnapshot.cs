// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using miniMessanger.Models;

namespace miniMessanger.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("miniMessanger.Models.BlockedUser", b =>
                {
                    b.Property<int>("BlockedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("blocked_id")
                        .HasColumnType("int(11)");

                    b.Property<bool>("BlockedDeleted")
                        .HasColumnName("blocked_deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("BlockedReason")
                        .HasColumnName("blocked_reason")
                        .HasColumnType("varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci");

                    b.Property<int>("BlockedUserId")
                        .HasColumnName("blocked_user_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int(11)");

                    b.HasKey("BlockedId")
                        .HasName("PRIMARY");

                    b.HasIndex("BlockedUserId")
                        .HasName("blocked_user_id");

                    b.HasIndex("UserId")
                        .HasName("user_id");

                    b.ToTable("blocked_users");
                });

            modelBuilder.Entity("miniMessanger.Models.Chatroom", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("chat_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("ChatToken")
                        .HasColumnName("chat_token")
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp");

                    b.HasKey("ChatId")
                        .HasName("PRIMARY");

                    b.ToTable("chatroom");
                });

            modelBuilder.Entity("miniMessanger.Models.Complaints", b =>
                {
                    b.Property<int>("ComplaintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("complaint_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("BlockedId")
                        .HasColumnName("blocked_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Complaint")
                        .HasColumnName("complaint")
                        .HasColumnType("varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<long>("MessageId")
                        .HasColumnName("message_id")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int(11)");

                    b.HasKey("ComplaintId")
                        .HasName("PRIMARY");

                    b.HasIndex("BlockedId")
                        .IsUnique()
                        .HasName("blocked_id");

                    b.HasIndex("MessageId")
                        .HasName("message_id");

                    b.HasIndex("UserId")
                        .HasName("user_id");

                    b.ToTable("complaints");
                });

            modelBuilder.Entity("miniMessanger.Models.LikeProfiles", b =>
                {
                    b.Property<long>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("like_id")
                        .HasColumnType("bigint(20)");

                    b.Property<bool>("Dislike")
                        .HasColumnName("dislike")
                        .HasColumnType("boolean");

                    b.Property<bool>("Like")
                        .HasColumnName("like")
                        .HasColumnType("boolean");

                    b.Property<int>("ToUserId")
                        .HasColumnName("to_user_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int(11)");

                    b.HasKey("LikeId")
                        .HasName("PRIMARY");

                    b.HasIndex("ToUserId")
                        .HasName("to_user_id");

                    b.HasIndex("UserId")
                        .HasName("user_id");

                    b.ToTable("like_profiles");
                });

            modelBuilder.Entity("miniMessanger.Models.Message", b =>
                {
                    b.Property<long>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("message_id")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("ChatId")
                        .HasColumnName("chat_id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp");

                    b.Property<string>("MessageText")
                        .HasColumnName("message_text")
                        .HasColumnType("varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci")
                        .IsUnicode(true);

                    b.Property<string>("MessageType")
                        .HasColumnName("message_type")
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("MessageViewed")
                        .HasColumnName("message_viewed")
                        .HasColumnType("boolean");

                    b.Property<string>("UrlFile")
                        .HasColumnName("url_file")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int(11)");

                    b.HasKey("MessageId")
                        .HasName("PRIMARY");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("miniMessanger.Models.Participants", b =>
                {
                    b.Property<long>("ParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("participant_id")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("ChatId")
                        .HasColumnName("chat_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("OpposideId")
                        .HasColumnName("opposide_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int(11)");

                    b.HasKey("ParticipantId")
                        .HasName("PRIMARY");

                    b.ToTable("participants");
                });

            modelBuilder.Entity("miniMessanger.Models.Profile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("profile_id")
                        .HasColumnType("int(11)");

                    b.Property<sbyte?>("ProfileAge")
                        .HasColumnName("profile_age")
                        .HasColumnType("tinyint(3)");

                    b.Property<string>("ProfileCity")
                        .HasColumnName("profile_city")
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("ProfileGender")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("profile_gender")
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("UrlPhoto")
                        .HasColumnName("url_photo")
                        .HasColumnType("varchar(256)");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int(11)");

                    b.HasKey("ProfileId")
                        .HasName("PRIMARY");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasName("user_id");

                    b.ToTable("profiles");
                });

            modelBuilder.Entity("miniMessanger.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_id")
                        .HasColumnType("int(11)");

                    b.Property<sbyte?>("Activate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("activate")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("int(11)");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("LastLoginAt")
                        .HasColumnName("last_login_at")
                        .HasColumnType("int(11)");

                    b.Property<string>("ProfileToken")
                        .HasColumnName("profile_token")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("RecoveryCode")
                        .HasColumnName("recovery_code")
                        .HasColumnType("int(11)");

                    b.Property<string>("RecoveryToken")
                        .HasColumnName("recovery_token")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserEmail")
                        .HasColumnName("user_email")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("UserHash")
                        .HasColumnName("user_hash")
                        .HasColumnType("varchar(120)");

                    b.Property<string>("UserLogin")
                        .HasColumnName("user_login")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("UserPassword")
                        .HasColumnName("user_password")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("UserPublicToken")
                        .HasColumnName("user_public_token")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UserToken")
                        .HasColumnName("user_token")
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.HasIndex("UserEmail")
                        .IsUnique()
                        .HasName("user_email");

                    b.ToTable("users");
                });

            modelBuilder.Entity("miniMessanger.Models.BlockedUser", b =>
                {
                    b.HasOne("miniMessanger.Models.User", "Blocked")
                        .WithMany("BlockedUsers")
                        .HasForeignKey("BlockedUserId")
                        .HasConstraintName("blocked_users_ibfk_2");

                    b.HasOne("miniMessanger.Models.User", "User")
                        .WithMany("UsersBlocks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("blocked_users_ibfk_1");
                });

            modelBuilder.Entity("miniMessanger.Models.Complaints", b =>
                {
                    b.HasOne("miniMessanger.Models.BlockedUser", "Blocked")
                        .WithOne("Complaints")
                        .HasForeignKey("miniMessanger.Models.Complaints", "BlockedId")
                        .HasConstraintName("complaints_ibfk_2");

                    b.HasOne("miniMessanger.Models.Message", "Message")
                        .WithMany("Complaints")
                        .HasForeignKey("MessageId")
                        .HasConstraintName("complaints_ibfk_3");

                    b.HasOne("miniMessanger.Models.User", "User")
                        .WithMany("Complaints")
                        .HasForeignKey("UserId")
                        .HasConstraintName("complaints_ibfk_1");
                });

            modelBuilder.Entity("miniMessanger.Models.LikeProfiles", b =>
                {
                    b.HasOne("miniMessanger.Models.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("miniMessanger.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("miniMessanger.Models.Profile", b =>
                {
                    b.HasOne("miniMessanger.Models.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("miniMessanger.Models.Profile", "UserId")
                        .HasConstraintName("profiles_ibfk_1")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
